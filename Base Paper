Tour Planning for Mobile Data-Gathering
Mechanisms in Wireless Sensor Networks
Ming Ma, Yuanyuan Yang, Fellow, IEEE, and Miao Zhao
Abstract—In this paper, we propose a new data-gathering mechanism
for large-scale wireless sensor networks by introducing
mobility into the network. A mobile data collector, for convenience
called an M-collector in this paper, could be a mobile robot or a
vehicle equipped with a powerful transceiver and battery, working
like a mobile base station and gathering data while moving
through the field. An M-collector starts the data-gathering tour
periodically from the static data sink, polls each sensor while
traversing its transmission range, then directly collects data from
the sensor in single-hop communications, and finally transports
the data to the static sink. Since data packets are directly gathered
without relays and collisions, the lifetime of sensors is expected
to be prolonged. In this paper, we mainly focus on the problem of
minimizing the length of each data-gathering tour and refer to this
as the single-hop data-gathering problem (SHDGP). We first formalize
the SHDGP into a mixed-integer program and then present
a heuristic tour-planning algorithm for the case where a single
M-collector is employed. For the applications with strict distance/
time constraints, we consider utilizing multiple M-collectors and
propose a data-gathering algorithm where multiple M-collectors
traverse through several shorter subtours concurrently to
satisfy the distance/time constraints. Our single-hop mobile datagathering
scheme can improve the scalability and balance the energy
consumption among sensors. It can be used in both connected
and disconnected networks. Simulation results demonstrate that
the proposed data-gathering algorithm can greatly shorten the
moving distance of the collectors compared with the covering line
approximation algorithm and is close to the optimal algorithm for
small networks. In addition, the proposed data-gathering scheme
can significantly prolong the network lifetime compared with a
network with static data sink or a network in which the mobile
collector can only move along straight lines.
Index Terms—Covering salesman problem (CSP), data gathering,
M-collector, mobile data collector, mobility, movement plan-
Manuscript received May 5, 2012; revised September 25, 2012; accepted
October 30, 2012. Date of publication November 21, 2012; date of current
version May 8, 2013. This work was supported in part by the U.S. National
Science Foundation under Grant ECS-0427345 and Grant ECCS-0801438 and
in part by the U.S. Army Research Office under Grant W911NF-09-1-0154.
The review of this paper was coordinated by Dr. G. Mao.
M. Ma was with the Department of Electrical and Computer Engineering,
New York State Center of Excellence in Wireless and Information Technology,
Stony Brook University, Stony Brook, NY 11794 USA. He is now with the
Storageworks Division, Hewlett Packard, Bellevue, WA 98007 USA (e-mail:
maming@gmail.com).
Y. Yang is with the Department of Electrical and Computer Engineering,
New York State Center of Excellence in Wireless and Information Technology,
Stony Brook University, Stony Brook, NY 11794 USA (e-mail:
yang@ece.sunysb.edu).
M. Zhao was with the Department of Electrical and Computer Engineering,
New York State Center of Excellence in Wireless and Information Technology,
Stony Brook University, Stony Brook, NY 11794 USA. She is now with the
Multimedia Networking Laboratory, Huawei Technologies, Bridgewater, NJ
08807 USA (e-mail: mzhao@ece.sunysb.edu).
Color versions of one or more of the figures in this paper are available online
at http://ieeexplore.ieee.org.
Digital Object Identifier 10.1109/TVT.2012.2229309
ning, spanning tree, traveling salesman problem (TSP), wireless
sensor networks (WSNs).
I. INTRODUCTION
IN RECENT years, wireless sensor networks (WSNs) have
emerged as a new information-gathering paradigm in a wide
range of applications, such as medical treatment, outer-space
exploration, battlefield surveillance, emergency response, etc.
[1]–[5]. Sensor nodes are usually thrown into a large-scale sensing
field without a preconfigured infrastructure. Before monitoring
the environment, sensor nodes must be able to discover
nearby nodes and organize themselves into a network. Most of
the energy of a sensor is consumed on two major tasks: sensing
the field and uploading data to the data sink. Energy consumption
on sensing is relatively stable because it only depends on
the sampling rate and does not depend on the network topology
or the location of sensors. On the other hand, the data-gathering
scheme is the most important factor that determines network
lifetime. Although applications of sensor networks may be
quite diverse, most of them share a common feature. Their
data packets may need to be aggregated at some data sink.
In a homogeneous network where sensors are organized into
a flat topology, sensors close to the data collector consume
much more energy than sensors at the margin of the network,
since they need to relay many packets from sensors far away
from the data collector. As a result, after these sensors fail,
other sensors cannot reach the data collector and the network
becomes disconnected, although most of the nodes can still survive
for a long period. Therefore, for a large-scale data-centric
sensor network, it is inefficient to use a single static data sink to
gather data from all sensors. In some applications, sensors are
deployed to monitor separate areas. In each area, sensors are
densely deployed and connected, whereas sensors that belong
to different areas may be disconnected. Unlike fully connected
networks, some sensors cannot forward data to the data sink via
wireless links. A mobile data collector is perfectly suitable for
such applications. A mobile data collector serves as a mobile
“data transporter” that moves through every community and
links all separated subnetworks together. The moving path of
the mobile data collector acts as virtual links between separated
subnetworks.
In this paper, we consider applications, where sensing data
are generally collected at a low rate and is not so delay sensitive
that it can be accumulated into fixed-length data packets and
uploaded once in a while. To provide a scalable data-gathering
scheme for large-scale static sensor networks, we utilize mobile
data collectors to gather data from sensors. Specifically, a
0018-9545/$31.00 © 2012 IEEE
MA et al.: TOUR PLANNING FOR MOBILE DATA-GATHERING MECHANISMS IN WSNs 1473
mobile data collector could be a mobile robot or a vehicle
equipped with a powerful transceiver, battery, and large memory.
The mobile data collector starts a tour from the data
sink, traverses the network, collects sensing data from nearby
nodes while moving, and then returns and uploads data to
the data sink. Since the data collector is mobile, it can move
close to sensor nodes, such that if the moving path is well
planned, the network lifetime can be greatly prolonged. Here,
network lifetime is defined as the duration from the time sensors
start sending data to the data sink to the time when a certain
percentage of sensors either run out of battery or cannot send
data to the data sink due to the failure of relaying nodes. In
the following, for convenience, we use M-collector to denote
the mobile data collector. As an extension of some recent work
in this area [36], [38], the contributions of this paper can be
summarized as follows.
1) We propose new data-gathering mechanisms for largescale
sensor networks when single or multiple Mcollectors
are used.
2) We focus on the problem of minimizing the length of each
data-gathering tour and formulate it into a mixed-integer
programming (MIP).
3) We propose a spanning tree covering algorithm for the
single M-collector case.
4) We also consider utilizing multiple M-collectors and
propose a data-gathering algorithm where multiple Mcollectors
traverse through several shorter subtours concurrently
to satisfy the distance/time constraints.
5) We carry out extensive simulations. The effectiveness of
our proposed algorithms is verified by comparing with
another data-gathering algorithm.
The rest of this paper is organized as follows. Section II outlines
some related work on data gathering inWSNs. Section III
gives assumptions and terms that will be used in this paper.
Section IV formalizes the single-hop data-gathering problem
(SHDGP) into an MIP. Section V presents the single-hop datagathering
algorithm for the single M-collector case. Section VI
extends the data-gathering algorithm to work in a network with
multiple M-collectors. Section VII gives simulation results and
some discussions. Finally, Section VIII concludes this paper.
II. RELATED WORKS
Here, we briefly outline some related work on data-gathering
mechanisms in WSNs.
It has been widely known that data routing can cost significant
energy expenditure in sensor networks with a flat topology.
To overcome this problem, some works in the literature have
introduced a hierarchy to the network [33]–[36], [39], and [41].
In such a network, sensor nodes are organized into clusters and
form the lower layer of the network. At the higher layer, cluster
heads collect sensing data from sensors and forward data to the
outside data sink. In general, such two-layered hybrid networks
are more scalable and energy-efficient than homogeneous sensor
networks. A cluster head acts not only as a data aggregation
point for collecting sensing data from sensors but also as a
controller/scheduler to make various routing and scheduling
decisions. In a homogeneous network, where all nodes have
identical capability and energy at the beginning, some of the
nodes are selected to serve as cluster heads [33]–[38]. However,
cluster heads will inevitably consume more energy than
other sensor nodes. To avoid the problem of cluster heads
failing faster than other nodes, sensor nodes can become cluster
heads rotationally [33]. In this type of network, since every
sensor node may possibly become a cluster head, each of them
has to be “powerful” enough to handle incoming and outgoing
traffic and cache sensing data, which will increase the overall
cost of the entire sensor network. Furthermore, selecting cluster
heads dynamically results in high overhead due to the frequent
information exchange among sensor nodes. Some efforts have
been made to improve the intrinsic disadvantage of homogeneous
networks by introducing a small number of resourcerich
nodes. Unlike homogeneous networks, a heterogeneous
sensor network contains a small number of resource-rich nodes
together with a large number of resource-limited basic sensor
nodes. Basic sensor nodes have limited communication capability
and mainly focus on sensing the environment, whereas
resource-rich nodes are equipped with more powerful transceivers
and batteries. In [39] and [41], resource-rich nodes
act as cluster heads, and the network is organized into a twolayered
hierarchical network. However, it is generally difficult
to deploy powerful cluster heads to appropriate positions without
learning the network topology.
Recently, mobility of sensor networks has been extensively
studied [6], [8]–[14], [16]–[19], [24]–[31]. In [6] and [8], radiotagged
zebras and whales were used as mobile nodes to collect
sensing data in a wild environment. These animal-based nodes
randomly wander in the sensing field and exchange sensing
data only when they move close to each other. Thus, sensor
nodes in such a network are not necessarily connected all the
time. Moreover, the mobility of randomly moving animals is
hard to predict and control; thus, the maximum packet delay
cannot be guaranteed. For sensor networks deployed in an
urban area, public transportation vehicles such as buses and
trains, which always move along fixed routes, can be mounted
with transceivers to act as mobile base stations [10], [12].
Compared with the randomly moving animals, the moving path
and timing are predictable in this case. However, data exchange
still depends on the existing routes and schedules of the public
transportation and, thus, is very restrictive. In [16], controlled
movement was exploited to improve data delivery performance.
Some mobile observers, called message ferries, were used to
collect data from sensors. Two variants were studied based on
whether ferries or nodes initiate proactive movement. In [14]
and [15], a number of mobile observers, called data mules, pick
up data directly from the sensors when they are in close range,
buffer the data, and drop off the data to wired access points.
The movement of mules is modeled as 2-D random walk. In
[13], mobile observers traverse the sensing field along parallel
straight lines and gather data from sensors. To reduce latency,
packets sent by some sensors are allowed to be relayed by other
sensors to reach mobile observers. This scheme works well in
a large-scale uniformly distributed sensor network. However,
in practice, data mules may not always be able to move along
straight lines, for example, obstacles or boundaries may block
the moving paths of data mules. When only a small number of
1474 IEEE TRANSACTIONS ON VEHICULAR TECHNOLOGY, VOL. 62, NO. 4, MAY 2013
data mules are available and not all sensors are connected, data
mules may not cover all the sensors in the network if they
only move along straight lines. In [17], a data-gathering scheme
was proposed to minimize the maximum average load of a
sensor by jointly considering the problems of movement planning
and routing. Based on the assumption that sensors are
distributed according to a Poisson process, the average load of
a sensor can be estimated as a function of the node density.
In [18], several advantages and design issues were discussed
for incorporating controlled mobility into the networking infrastructure,
and the main focus was on motion/speed control
and communication protocol design. In [9] and [19], mobile observers
in sensor networks were also considered. The hardware/
software implementation of underwater mobile observers was
mainly discussed in [9], whereas an algorithm to schedule the
mobile observer was proposed in [19], so that there is no data
loss due to the buffer overflow. In [20], the benefits of mobile
relay in WSNs were investigated. It was shown that when
a mobile node is used as mobile relay, the network lifetime
is improved compared with an all-static network. It was also
proved that the mobile relay needs to stay only within a two-hop
radius of the sink. In [24], an offline heuristic algorithm was
proposed to compute the periodic trajectories of mobile base
stations according to the data generation rates of sensors and
their locations. The work in [25] discussed the event-collection
problem by leveraging the mobility of the sink node and the
spatial–temporal correlation of the events, in favor of maximizing
the network lifetime with a guaranteed event-collection rate.
This problem was modeled as a sensor selection problem, and
the design of a feasible movement route for the mobile sink was
analyzed to minimize the velocity requirements for a practical
system. In [26], a rendezvous-based data-collection approach
was proposed for two scenarios, where the mobile base station
has fixed or variable moving tracks. Two approximate algorithms
were provided for the respective scenarios to minimize
the distance of multihop routing paths for local data aggregation
under the constraint that the tour length of the mobile base station
is no longer a threshold. In [27], a stochastic compressive
data-collection protocol for mobile WSNs, named SMITE, was
presented. SMITE consists of three parts: 1) random collector
election; 2) stochastic direct transmission from common nodes
to collectors when common nodes are in the collectors’ transmission
range; and 3) angle transmission from collectors to the
mobile sink when collectors gather enough data using a predictive
method. In [28], a protocol to minimize the overall network
overhead and energy expenditure associated with the multihop
data retrieval process was proposed. Sensors are organized into
clusters, and each cluster head performs data filtering upon
raw data exploiting potential spatial–temporal data redundancy
and forwards the filtered information to appropriate end nodes
with sufficient residual energy, located in proximity to the
mobile sink’s trajectory. In [29], the tradeoff between energy
saving and data-gathering latency in mobile data gathering was
studied by exploring a balance between the relay hop count of
local data aggregation and the moving tour length of the mobile
collector. Two algorithms were correspondingly proposed,
in which a subset of sensors is selected as polling points to
buffer locally aggregated data and upload the data to the mobile
collector when it arrives. Meanwhile, when sensors are affiliated
with these polling points, it is guaranteed that any packet
relay is bounded within a given number of hops. In [30], a heterogeneous
and hierarchical architecture was proposed for the
deployment of WSNs with mobile sinks for large-scale monitoring,
where the sensors transmit their sensing data to the gateway
nodes for temporary storage through multihop relays and
the mobile sinks travel along predetermined trajectories to collect
data from nearby gateway nodes. Under this data-gathering
paradigm, the capacitated minimum forest problem was studied,
and approximate algorithms were devised for instances
where all gateways have uniform and arbitrary capacities, respectively.
In [31], an adaptive data-harvesting approach was
proposed for mobile-agent-assisted data collection in WSNs
inspired by behavioral ecology. By using the marginal value
theorem, the entire sensor field was divided into small patches,
and the correlated data were gathered from each patch. The
mobile agent utilized spatial correlation of the interested data to
precisely build the probabilistic model to achieve the optimization
for accuracy and resource consumption. In [22], the authors
presented a routing scheme that exploits knowledge about the
behavior of mobile sinks within a network of data sources to
minimize energy consumption and network congestion. In particular,
data packets are not routed to the sink directly, instead to
a relay node along an announced or predicted path of the mobile
node that is close to the data source. The relay node will stash
the information until the mobile node passes by and picks up
the data. Linear programming was used to find optimal relay
nodes that minimize the number of necessary transmissions
while guaranteeing robustness against link and node failures, as
well as trajectory uncertainty. In [23], whirlpool ad hoc routing
protocol (WARP), a data-collection protocol for a mobile destination,
was proposed. The WARP maintains high reliability
at varying data rates and mobility speeds by rapidly detecting
mobility and locally repairing topology using the existing tree
topology. The key insight is speculatively sending data packets
around the last known location of a destination. In [21], the
multiple-sink placement problem was considered in energyconstrained
large-scale WSNs. A simple and efficient approach
was proposed with the objective of determining optimal sink
positions that maximize the network lifetime by reducing energy
consumption related to data transmissions from sensor
nodes to different sinks. Balanced graph partitioning techniques
were used to split the entire WSN into connected subnetworks.
From the preceding discussions, we can see that to make a
data-collecting scheme suitable to various network topologies,
it is more realistic and efficient to plan the moving tour of
the mobile observers dynamically based on the distribution of
sensors. This is the main motivation of this work.
III. PRELIMINARIES
In this paper, we consider the data-gathering problem in
which the M-collector can visit the transmission range of every
static sensor, such that sensing data can be collected by a singlehop
communication without any relay. Before we formally
describe the data-gathering problem, we first define some terms
that will be used in the rest of this paper.
MA et al.: TOUR PLANNING FOR MOBILE DATA-GATHERING MECHANISMS IN WSNs 1475
Fig. 1. Examples of polling points, neighbor sets, and candidate polling point set.
While an M-collector is moving, it can poll nearby sensors
one by one to gather data. Upon receiving the polling message,
a sensor simply uploads the data to the M-collector directly
without relay. We define the positions where the M-collector
polls sensors as polling points.When an M-collector moves to a
polling point, it polls nearby sensors with the same transmission
power as sensors, such that sensors that receive the polling
messages can upload packets to the M-collector in one hop.
After gathering data from sensors around the polling point, the
M-collector moves directly to the next polling point in the tour.
Thus, each data-gathering tour of an M-collector consists of a
number of polling points and the straight line segments connecting
them. For example, let P = {p1, p2, . . . , pt} denote a set of
polling points and DS be the data sink. Then, the moving tour
of the M-collector can be represented by DS → p1 → p2 →
· · ·→pt → DS. Thus, the problem of finding the optimal tour
can be considered as the problem of determining the locations
of polling points and the order to visit them. Before an Mcollector
starts a data-gathering tour, it needs to determine the
positions of all polling points and which sensors it can poll at
each polling point. We define the neighbor set of a point in
the plane as the set of sensors that can upload data to the Mcollector
directly without relay, if the M-collector polls sensors
at this point. Since the M-collector can only collect data at
polling points, each sensor must be in the neighbor set of at least
one polling point to upload data without relay. In other words,
the union of neighbor sets of all polling points must cover all
sensors.
In some existing work, the transmission range of an omnidirectional
antenna was simply assumed to be a disk-shaped area
around the transceiver. Based on this assumption, given a point
in the plane, the neighbor set of this point consists of all sensors
within the disk-shaped area around this point. However, due
to the uncertainties of a wireless environment, such as signal
fading, reflection from walls and obstacles, and interference,
it is hard to estimate the boundary of the transmission range
without real measurement [42], [43]. Therefore, in practice, it
is almost impossible to obtain the neighbor set of an unknown
point, unless the M-collector has moved to this point and
tested wireless links between it and its one-hop neighbors, or
a sensor has been placed at this point and acquired all its onehop
neighbors during the neighbor discovering phase. Thus,
it is only possible to test a finite number of points and their
corresponding neighbor sets in the plane, and we must select
polling points from this finite set of points, which we refer to
as the candidate polling point set. If the connection pattern of
sensors can be obtained, or in other words, we know the onehop
neighbors of every sensor, the position of each sensor can
be a candidate polling point, since the neighbor set of this point
is already known. However, the connection pattern may not
always be available before sending out M-collectors, unless the
network is completely connected so that the connection pattern
can be reported to the data sink via wireless transmissions. To
obtain the candidate polling points without the information on
the connection pattern, after sensors are deployed, one or more
M-collectors need to explore the entire sensing field. While
exploring, each M-collector can broadcast “Hello” messages
periodically with the same transmission power as sensors. Each
sensor that can decode the “Hello” message correctly replies
with an “ACK” message to notify the M-collector where it
is. Upon receiving the “ACK” message from the sensor, the
M-collector marks its current location as a candidate polling
point and adds the ID of the sensor into the neighbor set of
this candidate polling point. Thus, all wireless links between
sensors and the M-collector at the candidate polling points are
bidirectionally tested. In addition, each sensor can also discover
its one-hop neighbors by broadcasting the “Hello” messages
during the neighbor discovering phase. After the sensor reports
the IDs of its one-hop neighbors to the M-collector by including
the information into the “ACK” message, the position of the
sensor can also become a candidate polling point. In Fig. 1,
we illustrate the definition of polling points, neighbor set, and
candidate polling point set by an example, where there are four
sensors s1, s2, s3, and s4 deployed at positions l1, l2, l3, and
l4, respectively. During the exploration phase, the M-collector
discovers the neighbor sets of l5 and l6 by broadcasting “Hello”
messages at these points. Thus, l5 and l6 can be added into the
candidate polling point set. Since sensors s1, s2, s3, and s4 also
report their one-hop neighbors to the M-collector by sending
“ACK” to the M-collector, l1, l2, l3, and l4 also become candidate
polling points. In Fig. 1, if there is a wireless link between
sensor si and position lj , we say that si belongs to the neighbor
set of lj , where si ∈ {s1, s2, s3, s4} and lj ∈ {l1, l2, . . . , l6}.
Thus, candidate polling point set L = {l1, l2, . . . , l6}; neighbor
sets of l1, l2, and l5 are {s1, s2}; and neighbor sets of l3, l4, and
l6 are {s3, s4}. In summary, a candidate polling point set can
contain two types of points in the plane: the positions where
sensors are deployed and the points where the M-collector has
tested the wireless links between it and its one-hop neighbors.
After the discovering phase, we assume that each sensor has
knowledge of all its one-hop neighbors and the M-collector
acquires the information about the neighbor set of each polling
point.
Unlike in a multihop homogeneous network, in our scheme,
M-collectors and sensors operate in a server–client mode, and
sensors do not need to overhear the channel all the time to relay
packets from their neighbors. Once an M-collector moves to a
polling point, it can send a beep to wake up the transceiver of
the nearby sensors, gather data from sensors, and put sensors
into sleep again.We assume that each sensor is equipped with a
passive RFID device [32], which can activate the transceiver of
the sensor by sending an interrupt signal to the microcontroller,
1476 IEEE TRANSACTIONS ON VEHICULAR TECHNOLOGY, VOL. 62, NO. 4, MAY 2013
Fig. 2. Single-hop data-gathering problem (SHDGP).
once it receives the RFID call from the M-collector. The advantage
of passive RFID devices is that they do not need power
supply from sensor batteries and can obtain energy from the
outside RF signal. Next, we will define the SHDGP.
IV. SINGLE-HOP DATA GATHERING
Here, we consider the problem of finding the shortest moving
tour of an M-collector that visits the transmission range of each
sensor. As shown in Fig. 2, the positions of sensors are either
the polling points in the data-gathering tour or within the onehop
range of the polling points. For the sake of simplicity, we
assume that M-collectors move at a fixed speed and ignore the
time for making turns and data transmission, such that we can
roughly estimate the time of a data-gathering tour by the tour
length. Clearly, by moving through the shortest tour, data can
be collected in the shortest time such that the users will have
the most up-to-date data.We refer to this as the single-hop datagathering
problem (SHDGP).
Before giving the formulation of the SHDGP, we first give
some definitions and assumptions for the problem. Let R denote
the radius of the sensing range, which is defined as the area
where a sensor collects (senses) data. Let r denote transmission
range of sensors. The M-collector can only gather data from a
sensor when the M-collector enters the transmission range of
the sensor. We consider the problem in which r and R must
satisfy 0 < (r/R) < 1. Note that when (r/R) → 0, the wellknown
traveling salesman problem (TSP) for points in the plane
[49] can be reduced to the SHDGP. In this case, theM-collector
must visit the location of every sensor one by one to gather data.
Since sensors are close enough to M-collectors while uploading
data, transmission power can be minimized, and the lifetime can
be maximized. The goal of the TSP for points in the plane is to
find a minimum distance (cost) tour that visits every point in
the plane exactly once, which is known to be NP-hard. When
(r/R) ≥ 1, the network reduces to a single-hop network, and
like a base station in a WLAN, the M-collector can collect
data directly from any sensor without moving. Considering the
applications, such as environment monitoring and battlefield
surveillance, in which sensors with fixed transmission power
are deployed in a quite large area, we are interested in the more
realistic case in which 0 < (r/R) < 1.
As discussed earlier, the well-known TSP can be reduced to
a special case of the SHDGP in polynomial time. Therefore, the
SHDGP is NP-hard.
The SHDGP can be formalized as follows after the candidate
polling point set is obtained. Given a set of sensor
nodes S = {s1, s2, . . . , sns
}, a set of candidate polling point
set L = {l0, l1, l2, . . . , lnl
}, where l0 denotes the starting and
the ending point of the tour, and the neighbor set nb(li) of
each candidate polling point li (i = 1, 2, . . . , nl) find a set of
polling points and determine the sequence to visit them, such
that every sensor in S belongs to the neighbor set of at least one
polling point, and the total length of line segments connecting
all polling points is minimized. We define a complete directed
graph G = (L,A) and associate a nonnegative cost cij with
each arc aij ∈ A, where cij is equal to the cost of the distance
between the candidate polling points li and lj . The SHDGP can
be formulated as an MIP as follows:
Minimize

i,j∈L,i=j
cijxij (1)
Subject to

i∈L,i=j
xij = Ij ∀j ∈ L (2)

j∈L,j=i
xij = Ii ∀i ∈ L (3)

j∈nb(li)
Ii ≥ 1 ∀j ∈ S (4)
yij ≤ |L|xij ∀i, j ∈ L (5)

j∈L\{l0}
yjl0 =

j∈L\{l0}
Ij (6)

i
yji −

k
ykj = Ij ∀j ∈ L \ {l0} (7)
where
xij =

1, if data-gathering tour contains arc aij
0, otherwise
Ii =
1, if data-gathering tour contains
candidate polling point li
0, otherwise
yij : flow value from li to lj on arc aij .
In this formulation, the objective function (1) minimizes the total
cost (distance) of the data-gathering tour. xij is an indicator
variable denoting whether arc aij from candidate polling points
li to lj belongs to the optimal tour. Binary variable Ii indicates
whether candidate polling point li is on the optimal tour.
Constraints (2) and (3) ensure the fact that every node in the tour
must have one arc pointing toward it and the other arc pointing
away from it. Constraint (4) enforces that every sensor must be
in the neighbor set of at least one polling point belonging to
the tour, such that every sensor can communicate with the Mcollector
directly. Constraints (5)–(7) exclude the solutions with
subtours, which is similar to that in [44] proposed by Gavish
for the capacitated minimal directed tree problem. Specifically,
constraint (5) restricts that flow can only take place in an arc if it
is on the tour. Constraint (6) specifies that the number of units of
flow entering vertex l0 is equal to the number of polling points
in the tour. Finally, constraint (7) enforces that one unit flows
out of each of the other points in the tour. In a way similar to
that in [44], it can be shown that constraints (5)–(7) can prohibit
a tour that does not include the starting and ending point l0.
MA et al.: TOUR PLANNING FOR MOBILE DATA-GATHERING MECHANISMS IN WSNs 1477
Fig. 3. Spanning tree covering algorithm. (a) Neighbor set of p1 is covered with the average cost d1/3. (b) Neighbor set of p1 is covered with the average cost
d2/3. (c) Neighbor set of p1 is covered with the average cost d3/3. (d) Data-gathering tour obtained by the spanning tree covering algorithm.
V. HEURISTIC ALGORITHMS FOR THE SINGLE-HOP
DATA-GATHERING PROBLEM
Knowing that the SHDGP is NP-hard, we will now develop
a heuristic algorithm to solve the problem approximately. First,
it is interesting to compare the SHDGP with a similar problem,
i.e., the covering salesman problem (CSP) [47]. In [47], Current
and Schilling defined the CSP and proved its NP-hardness.
The problem they considered is obtaining the shortest tour of
a subset of all cities such that every city not on the tour is
within some predetermined distance dist of a city that is on
the tour. If the transmission range of each sensor could be
modeled as a disk-shaped area, the SHDGP can be simplified
to the CSP by setting dist in the CSP equal to the transmission
range of sensors. In [47], a heuristic solution was introduced
by dividing the problem into two NP-hard subproblems. First,
find a minimum vertex cover and then determine the shortest
tour of all vertices in the cover. The first step of their heuristic
is to minimize the number of stops (same as polling points in
the SHDGP), but it does not consider the lengths of the edges
connecting these stops.
Arkin and Hassin designed a [(

72 + 32 + 1)rtsp] (≈12.9)
approximation algorithm for the geometric version of the CSP
in [48], where the salesman has to enter the unit circle region
around each city, and rtsp denotes the best known constant
factor we can approximate an optimal TSP tour on a set of
points in the plane and is currently equal to 1.5. The basic idea
of their approximation algorithm is as follows. First, cover all
unit circles by a minimum number of vertical covering lines.
Then, choose a representing point from each unit circle region
as the intersection point of the diameter of the region and
the covering line. Finally, find an approximation TSP tour on
the representing points. We will refer to this approximation
algorithm as the covering line algorithm in the rest of this
paper. Note that if the transmission range of each sensor can
be modeled as a unit circle, the covering line algorithm for the
CSP could also approximate the optimal tour for the SHDGP.
However, as discussed earlier, in practice, transmission ranges
of sensors are far from unit circles and are difficult to estimate.
Furthermore, although the covering line algorithm provides an
upper bound on the tour length, the approximation ratio is quite
high (≈12.9). In Section VII, we will compare our proposed
greedy algorithm with the covering line algorithm in various
scenarios. In addition, we have managed to run the optimal
algorithm for a few small networks to compare with our greedy
algorithm. As will be shown, the simulation results show that
our greedy algorithm performs much better than the covering
line algorithm in various scenarios and is close to the optimal
algorithm in small networks.
The basic idea behind our proposed greedy algorithm is to
choose a subset of points from the candidate polling point
set, each of which corresponds to a neighbor set of sensors.
At each stage of the algorithm, a neighbor set of sensors can
be covered when its corresponding candidate polling point
is chosen as a polling point in the data-gathering tour. The
algorithm will terminate after all sensors are covered. The
algorithm tries to cover each uncovered neighbor set of sensors
with the minimum average cost at each stage, where the “cost”
will be formally defined later. The algorithm can be described
as follows. Let Pcurr contain all polling points, L be the set
of all candidate polling points, and Ucurr contain the set of
remaining uncovered sensors at each stage of the algorithm.
First, start with an empty set Pcurr. For each candidate polling
points l in L, let nb(l) denote the neighbor set of l. Recall that
each neighbor set corresponds to a candidate polling point and
contains all the sensors that can be polled by the M-collector at
this candidate polling point. The distance between two neighbor
sets is defined as the distance between their corresponding
candidate polling points. Let cost{nb(l)} be the cost of an
uncovered neighbor set nb(l), which is equal to the shortest
distance between nb(l) and any covered neighbor set. Let α =
cost{nb(l)}/|nb(l)

Ucurr|, which denotes the average cost to
cover all uncovered sensors in nb(l).While there are remaining
uncovered elements in Ucurr, choose the uncovered neighbor
set nb(l) with the minimum α value, add the corresponding
candidate polling point l of nb(l) into Pcurr, and remove the
corresponding covered sensors from Ucurr. The algorithm terminates
when all nodes are covered. Finally, Pcurr contains all
polling points in the data-gathering tour. After obtaining all the
polling points, the data-gathering tour can be easily obtained by
running any approximate algorithm for the TSP. It is interesting
to note that in a special case of the SHDGP, when each neighbor
set contains only one sensor and no two neighbor sets contain
the same sensor, our greedy algorithm is exactly the same as
Prim’s algorithm for the minimum spanning tree problem, since
the M-collector has to visit every candidate polling point to
cover all sensors. Thus, we name our greedy algorithm the
spanning tree covering algorithm. In Fig. 3, an example of the
spanning tree covering algorithm is illustrated. In the figure,
starting from the data sink, the M-collector chooses p1 as the
first polling point, since compared with other candidate polling
points, the uncovered sensors in the neighbor set of p1 can be
covered with the smallest average cost d1/3. Next, p2 and p3
1478 IEEE TRANSACTIONS ON VEHICULAR TECHNOLOGY, VOL. 62, NO. 4, MAY 2013
TABLE I
SPANNING TREE COVERING ALGORITHM
will be picked as the second and third polling points with the
average cost d2/3 and d3/3, respectively. After that, the shortest
tour can be approximated on all chosen polling points and the
data sink, as shown in Fig. 3(d). The details of the spanning tree
covering algorithm are given in Table I.
We now analyze the communication and computational complexity
of the spanning tree covering algorithm. Suppose there
are a total of N sensors andM candidate polling points. Recall
that a polling point can be either the position of a sensor or
a point where the M-collector has tested the wireless links between
it and its one-hop neighbors during the exploration phase.
In a fully connected network where the connection pattern of
sensors can be sent to the data sink via wireless transmissions
before the M-collector starts the first tour, the M-collector does
not have to explore the field, and the position of each sensor
directly becomes a candidate polling point. In this case, the
number of candidate polling points M is equal to the number
of sensors N. If not all sensors are connected to the data sink,
an M-collector needs to be sent out to discover the position of
every sensor regardless of the data-gathering scheme used. For
most applications, sensing data are nevertheless related to the
positions where they are collected to be meaningful. Thus, the
procedure of obtaining candidate polling points does not cause
much extra communication cost versus the regular exploration
procedure. In this case, the number of candidate polling points
M is generally no less than the number of sensors N and
depends on several factors, such as the area of the sensing field
A, the transmission range of sensors r, and the exploration
scheme. In a naive exploration scheme, for example, the Mcollector
moves along several parallel lines, M is on the order
of A/r2. Note that the exploration procedure is a one-time
operation and does not need to be repeated unless the topology
of the network changes. For the computational complexity, it
takes O(NM) time to find a subfamily of neighbor sets that
cover all sensors. The work of finding an approximate shortest
tour on polling points in P can be done in O(M2) time.
Thus, the total computational complexity of the spanning tree
covering algorithm is O(M2 +NM).
VI. DATA GATHERING WITH MULTIPLE M-COLLECTORS
We have considered how to plan the data-gathering tour of a
single M-collector. However, for some large-scale applications,
each data-gathering tour may take such a long time that a single
M-collector may not be sufficient to visit the transmission
ranges of all sensors before their buffers overflow. A possible
solution [50] to this problem is to allow some sensors to relay
packets from other nodes to the mobile data collector. Thus,
the M-collector does not need to visit the transmission range of
every single sensor, and the length of each tour can be reduced.
However, the drawback of using relay is that some relaying
nodes may fail faster than others. To avoid unbalanced network
lifetime, we will stay with the one-hop data-gathering scheme
by utilizing multiple M-collectors.
A straightforward way to deal with the tour planning problem
of multiple M-collectors can be borrowed from the traditional
delivery vehicle routing problem, where a number of trucks
are sent out from the facility center, and each of them moves
through a subtour, delivers packages home by home, and finally
returns to the facility center before the center is closed. The
problem of finding a set of delivery subtours so that the number
of trucks can be minimized is called the multiple TSP (MTSP)
[51], which is known to be NP-hard. Different from delivery
trucks, M-collectors can gather data remotely via wireless
links without visiting the “home” of every sensor. Given the
distance/time constraint of each subtour to prevent buffers from
overflowing, the problem we consider here is to find a set of
data-gathering subtours such that the number of M-collectors
can be minimized. If we force every M-collector to visit the data
sink at least once in each tour like delivery trucks, the problem
can be reduced to the MTSP by retracting the transmission
range of any sensor to zero. Furthermore, in very large scale
networks, some sensors may be deployed so far away from the
data sink that the round-trip time of the longest data-gathering
tour exceeds the time constraint for filling the buffer of a sensor.
Thus, if all M-collectors have to visit the data sink, even if
there are enough M-collectors, a feasible set of subtours cannot
always be found. Fortunately, unlike delivery vehicles, any two
M-collectors can exchange their “goods” (data) via wireless
links without meeting each other physically, which makes it
possible for M-collectors far away from the data sink to upload
data to the data sink through the relays of other M-collectors
rather than visit the data sink themselves.
In our data-gathering scheme with multiple M-collectors,
only one M-collector needs to visit the transmission range of
the data sink. As shown in Fig. 4(b)–(d), the entire network
can be divided into subnetworks. In each subnetwork, an Mcollector
is responsible for gathering data from local sensors
in the subarea. Once in a while, the M-collector forwards the
sensing data to one of the other nearby M-collectors, when two
M-collectorsmove close enough. Finally, data can be forwarded
to theM-collector that will visit the data sink via relays of other
M-collectors. In Fig. 4(d), all data are forwarded to M-collector
1 from other M-collectors, and then, M-collector 1 carries and
uploads data to the data sink. There are some interesting issues
here, such as how to relay the packets to the data sink energy
efficiently, how to schedule the movement of M-collectors to
reduce the packet delay, and so on. In this paper, we will
focus on how to plan the subtours of multiple M-collectors to
minimize the number of M-collectors.
The data-gathering algorithm with multiple M-collectors can
be described as follows. First, find the polling point set P by
running the spanning tree covering algorithm in Table I. Then,
find the minimum spanning tree T(V,E) on polling points.
We refer to the minimum spanning tree on polling points as
MA et al.: TOUR PLANNING FOR MOBILE DATA-GATHERING MECHANISMS IN WSNs 1479
Fig. 4. Data gathering with multiple M-collectors. (a) Build the spanning covering tree. (b) Decompose the spanning covering tree into a set of subtrees. (c) Find
an approximate shortest tour on points of each subtree. (d) Sensing data collected from sensors are forwarded to the nearest M-collector to the data sink.
the spanning covering tree. Let Lmax be the upper bound on
the length of any subtour, which guarantees the data to be
collected before sensors run out of storage. Note that Lmax
could depend on a lot of factors, such as the buffer size,
the data acquisition rate of sensors, and the moving speed of
M-collectors. Let t(v) denote the subtree of T, which is rooted
at vertex v and consists of all child vertices of v and edges connecting
them in T. Let Parent{v} be the parent vertex of v in T.
Let Weight{v} represent the sum of all link costs in the subtree
t(v) rooted at v. Then, calculate the weight values of all vertices
in T. Repeatedly remove subtrees from T until no vertex is left
in T. To build a subtree t in each loop, start from the deepest
leaf vertex of the remaining T, and let it be the root Root(t)
of the subtree t. Check the weight of Parent(Root(t)), and
let Root(t) = Parent(Root(t)) if Weight(Parent(Root(t))) ≤
Lmax/2. Otherwise, add all child vertices of Root(t) and edges
connecting them in T into t and remove t from T. Here,
Weight(Parent(Root(t))) also denotes the total edge length of
subtree t. After removing the subtree, upgrade the weight value
of each vertex in the remaining T. The algorithm terminates
when T is empty. Then T is decomposed into a set of subtrees.
The total length of any subtree t, which is denoted by Lt, is no
more than Lmax/2. Finally, the subtour on polling points of
each subtree can be determined by running the approximation
algorithm for the TSP. Let Lt
apx be the length of the approximated
subtour on points in subtree t. In the 2-approximation
algorithm for the TSP [49], the approximated tour is obtained
by duplicating all edges of the minimum spanning tree and then
finding an Eulerian circle in it. Hence, Lt
apx is no more than two
times the length of the minimum spanning subtree t Lt, that is,
Lt
apx
≤ 2 × Lt. As discussed earlier, Lt is bounded by Lmax/2.
Thus, we have Lt
apx
≤ 2 × Lt ≤ Lmax, which means that the
length of any subtour obtained by the data-gathering algorithm
with multiple M-collectors is no more than the upper bound
on the length of a subtour Lmax. The details of the algorithm
are shown in Table II. Fig. 4(a)–(d) illustrates four major steps
of the data-gathering algorithm with multiple M-collectors:
1) build the spanning covering tree; 2) decompose the spanning
covering tree into a set of subtrees; 3) find an approximate
shortest subtour on the points of each subtree; and 4) sensing
data collected from sensors are forwarded to the nearest Mcollector
to the data sink. We now discuss the complexity
of the data-gathering algorithm with multiple M-collectors.
TABLE II
DATA-GATHERING ALGORITHM WITH MULTIPLE M-COLLECTORS
Compared with the spanning tree covering algorithm in Table I,
no extra communication is needed. In Table II, both outer and
inner loops need to be executed at most O(M) rounds, where
M is the number of candidate polling points. The loop takes
O(M2) time, and the operations before the loops take another
O(NM +M2) time. Thus, the total computational complexity
is O(NM +M2).
VII. PERFORMANCE EVALUATIONS
We have conducted extensive simulations to validate the proposed
algorithms. In the simulations, we assume that a bunch
of sensor nodes is uniformly deployed in the sensing field.
For single-hop data gathering, we evaluate the tour length of
a single M-collector in both small and large networks, compare
the relative network lifetime of the proposed spanning tree
covering algorithm with the other two data-gathering schemes,
and illustrate the data-gathering algorithm with multiple Mcollectors
in a randomly generated network.
A. Tour Length of a Single M-Collector
Because of the NP-hardness of the SHDGP, the brute force
search method of the optimal solution in a large network
becomes infeasible. However, we have managed to run the optimal
algorithm for a few small networks for comparison with our
heuristic algorithm.We first compare the tour length of a single
M-collector obtained by running the spanning tree covering
algorithm with the optimal solution in small networks. TheMIP
formulation of the SHDGP in Section IV is solved to obtain
the optimal solution by using the GNU linear programming
1480 IEEE TRANSACTIONS ON VEHICULAR TECHNOLOGY, VOL. 62, NO. 4, MAY 2013
Fig. 5. Single-hop data gathering with one M-collector: comparison with the optimal solution in small networks. (a) Transmission range of sensors equal to
40 m. (b) Transmission range of sensors equal to 60 m. (c) Transmission range of sensors equal to 80 m.
solver [52]. The connectivity of a sensor network depends on
two major factors: deployment density and the transmission
range of sensors. In this scenario, we measure the average tour
length for all combinations of transmission range equal to 40,
60, and 80 m and the number of sensors equal to 20, 30, and 40.
Sensors are uniformly deployed in a 500 m × 500 m field. An
M-collector starts each tour from point (0 m, 250 m) and returns
to the same point after each tour. In a very sparsely deployed
network where the transmission range is relatively short compared
with the average distance between a sensor and its nearest
neighbor, it is very possible that the network is totally disconnected.
In this case, the M-collector may need to visit every
sensor regardless of the algorithm employed.We can observe in
Fig. 5(a) that when 20 nodes with a relatively short transmission
range of 40 m are deployed, both the spanning tree covering
algorithm and the covering line algorithm have very close tour
length to the optimal solution. However, as the transmission
range increases, we can see in Fig. 5(b) and (c) that the spanning
tree covering algorithm performs much better than the covering
line algorithm and is very close to the optimal solution.
We also compare the tour length of the spanning tree covering
algorithm with the covering line algorithm in larger
networks. We measured the relative tour length of the spanning
tree covering algorithm compared with that of the covering
line algorithm for transmission ranges 40, 60, and 80 m, respectively,
when the number of nodes increases from 100 to
1000. Sensors are randomly deployed into a 1000 m × 1000 m
field. The M-collector needs to visit the data sink at point (0 m,
500 m) in each tour. In Fig. 6, we can observe that, for any transmission
range, the relative tour length keeps decreasing as the
network size increases. For the network as large as 1000 nodes
with the transmission range equal to 80 m, the spanning tree
covering algorithm can save up to 40% moving distance compared
with the covering line algorithm.
Fig. 7 plots the performance of the spanning tree covering
algorithm as a function of the area of the square sensing field in
the cases that the number of nodes is equal to 200, 600, and
1000, respectively. The area of the sensing field varies from
300 m × 300 m to 1000 m × 1000 m to represent different
node densities. The transmission range is fixed to 60 m for
all cases. Fig. 7(a) shows that the tour length becomes longer
with the increase in the area of the sensing field, regardless of
the number of nodes. This is intuitive as sensors become more
sparsely distributed when the field becomes larger. It is also
Fig. 6. Single-hop data gathering with one M-collector: comparison with the
covering line algorithm in large networks as the number of nodes increases from
100 to 1000.
Fig. 7. Single-hop data gathering with one M-collector: the tour length and
the number of polling points as functions of the area of square sensing field
under the settings of different numbers of nodes.
MA et al.: TOUR PLANNING FOR MOBILE DATA-GATHERING MECHANISMS IN WSNs 1481
Fig. 8. Single-hop data gathering with one M-collector: relative x% network
lifetime. (a) Comparison of the M-collector and the static data collector.
(b) Comparison of the well-planned tour of the M-collector and the straight
line tour.
noticed that the tour lengths in all cases are similar to each other
when the area is small; however, the cases with more nodes
would result in a longer tour length when the area increases.
For example, when the area is 800 m × 800 m, the tour length
of the 1000-node case is 18.5% longer than that of the 200-
node case. This is reasonable because when there are more
sensors, the M-collector may need to visit more polling points
to move close enough to cover all the sensors, particularly in
the sparse distribution scenarios. Fig. 7(b) plots the number
of polling points in a data-gathering tour as a function of the
area of the sensing field. The results demonstrate that when the
field becomes larger and there are more sensors, more polling
points would be selected from the candidate polling points to
guarantee that M-collector can reach all the sensors in a single
hop by visiting these selected polling points.
B. Network Lifetime
We now compare the network lifetime of the following three
data-gathering schemes. Scheme 1: A static data collector is
placed in the center of the network [at point (335 m, 335 m)].
Scheme 2: A mobile data collector that can only move back and
forth through the straight line between (0 m, 335 m) and (670 m,
335 m). Scheme 3: An M-collector that can move along a wellplanned
data-gathering tour that starts from and ends at point
(0 m, 335 m). In this scenario, we use x% network lifetime to
denote the network lifetime when (100 − x)% sensors either
run out of battery or cannot send data to the data sink due
to the failure of relaying nodes. In Schemes 1 and 2, sensors
are allowed to relay packets. We measured the optimal network
lifetime by using the load-balancing algorithm in [39]. The optimal
lifetime of the first two schemes is used as the performance
reference for comparison purposes. In Scheme 1, since every
sensor must be connected to the static data collector, sensors
have to be deployed densely enough to guarantee connectivity.
We measured the 100%, 90%, and 50% network lifetimes of all
three schemes when 600, 800, and 1000 sensors are randomly
deployed in a 670 m × 670 m area. The x% relative network
lifetimes of Scheme 3 compared with Schemes 1 and 2 are
plotted in Fig. 8(a) and (b). From Fig. 8, we observe that,
by moving the M-collector through a well-planned tour, the
lifetime of Scheme 3 can be prolonged significantly compared
with Schemes 1 and 2.We can also see in Fig. 8 that the relative
lifetime of Scheme 3 compared with both Schemes 1 and 2
decreases as the sensor density increases. In Scheme 3, since
the M-collector can be reached by any sensor within a single
hop, no packet relay by sensors is needed. Thus, no matter how
densely sensors are deployed, the network lifetime is roughly
unchanged. In Schemes 1 and 2, as more sensors are deployed,
the upload routing paths from sensors to the mobile collector
can be more carefully planned, such that the upload traffic can
be more evenly distributed across more relay nodes. No sensors
need to relay significantly heavier traffic than others. That
explains why the network lifetime of Schemes 2 and 3 actually
increases as the number of deployed sensors becomes larger.
C. Data Gathering With Multiple M-Collectors
Here, we first use an example to show how the data-gathering
algorithm with multiple M-collectors works. In this example,
there are 600 sensors deployed in a 1000 m × 1000 m area
with a transmission range of 40 m. Assume that M-collectors
move at the fixed speed of 1 m/s. The data memory of each
sensor can hold at most 512 kB, whereas each sensor collects
data from the environment at the fixed rate of 512 bytes/s. Thus,
each subtour of any M-collector must be no more than 1000 m
to prevent buffers of sensors from overflowing, i.e., Lmax =
1000 m. Fig. 9(a)–(c) gives the simulation results for finding
the spanning covering tree of the network, decomposing the
spanning covering tree into a set of subtrees, and approximating
the shortest tour on points of each subtree, respectively. As a
result, there are a total of 19 subtours in the field, i.e., 19 Mcollectors
are required to guarantee that the length of each
subtour is no more than 1000 m.
Finally, we have carried out a set of simulations to investigate
the number of M-collectors (or subtours) as a function of
Lmax. The result is plotted in Fig. 10. Lmax varies from 500
to 1500 m to represent different requirements on the subtour
length. There are still 600 sensors randomly over a 1000 m ×
1000 m field. The transmission range is set to 40, 60, and
80 m, respectively. It is observed from the figure that the
number of M-collectors decreases as Lmax increases. This is
intuitive as each subtour can cover more sensors when Lmax
becomes larger. In addition, given a particular Lmax, the larger
transmission range case results in fewerM-collectors compared
1482 IEEE TRANSACTIONS ON VEHICULAR TECHNOLOGY, VOL. 62, NO. 4, MAY 2013
Fig. 9. Single-hop data gathering with multiple M-collectors. (a) Spanning covering tree. (b) The spanning covering tree is decomposed into a set of subtrees.
(c) An approximate shortest subtour is found on nodes of each subtree.
Fig. 10. Number of M-collectors as a function of Lmax.
with the smaller transmission range case. This is reasonable
as each subtour can link up more remote sensors in a single
hop with a larger transmission range such that it requires fewer
subtours to cover the entire sensing field.
VIII. CONCLUSION
In this paper, we proposed a mobile data-gathering scheme
for large-scale sensor networks. We introduced a mobile data
collector, called an M-collector, which works like a mobile
base station in the network. An M-collector starts the datagathering
tour periodically from the static data sink, traverses
the entire sensor network, polls sensors and gathers the data
from sensors one by one, and finally returns and uploads data to
the data sink. Our mobile data-gathering scheme improves the
scalability and solves intrinsic problems of large-scale homogeneous
networks. By introducing the M-collector, data gathering
becomes more flexible and adaptable to the unexpected changes
of the network topology. In addition, data gathering by Mcollectors
is perfectly suitable for applications, where sensors
are only partially connected. For some applications in largescale
networks with strict distance/time constraints for each
data-gathering tour, we introduced multiple M-collectors by
letting each of them move through a shorter subtour than the entire
tour. The simulation results demonstrate that our proposed
data-gathering scheme can greatly reduce the moving length
compared with the covering line algorithm and is close to the
optimal algorithm in small networks. In addition, it can prolong
the network lifetime significantly compared with the scheme
that has only a static data collector and the scheme in which the
mobile data collector can only move along straight lines.
REFERENCES
[1] A. Mainwaring, J. Polastre, R. Szewczyk, D. Culler, and J. Anderson,
“Wireless sensor networks for habitat monitoring,” in Proc. ACM Int.
Workshop Wireless Sens. Netw. Appl., Atlanta, GA, Sep. 2002, pp. 88–97.
[2] S. Chessa and P. Santi, “Crash faults identification in wireless sensor
networks,” Comput. Commun., vol. 25, no. 14, pp. 1273–1282, Sep. 2002.
[3] L. Schwiebert, S. K. S. Gupta, and J. Weinmann, “Research challenges in
wireless networks of biomedical sensors,” in Proc. ACM MobiCom, 2001,
pp. 151–165.
[4] B. Sauser. (2007). Networking the Hudson River. [Online]. Available:
http://www.technologyreview.com/Infotech/19309/page1/?a=f
[5] S. Churchill, “Wireless bridge monitoring,” MIT Technol. Rev.,
2007. [Online]. Available: http://www.dailywireless.org/2007/08/13/
wireless-bridge-monitoring/
[6] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh, and
D. Rubenstein, “Energy-efficient computing for wildlife tracking: Design
tradeoffs and early experiences with ZebraNet,” in Proc. ASPLOS, 2002,
pp. 96–107.
[7] C. Ma and Y. Yang, “A battery-aware scheme for routing in wireless
ad hoc networks,” IEEE Trans. Veh. Technol., vol. 60, no. 8, pp. 3919–
3932, Oct. 2011.
[8] T. Small and Z. Haas, “The shared wireless infostation model—A new ad
hoc networking paradigm (or where there is a whale, there is a way),” in
Proc. ACM MobiHoc, 2003, pp. 233–244.
[9] I. Vasilescu, K. Kotay, D. Rus, M. Dunbabin, and P. Corke, “Data collection,
storage and retrieval with an underwater sensor network,” in Proc.
ACM SenSys, 2005, pp. 154–165.
[10] A. Chakrabarty, A. Sabharwal, and B. Aazhang, “Using predictable observer
mobility for power efficient design of a sensor network,” in Proc.
2nd Int. Workshop IPSN, Apr. 2003, pp. 129–145.
[11] B. Hull, V. Bychkovskiy, K. Chen, M. Goraczko, E. Shih, Y. Zhang,
H. Balakrishnan, and S. Madden, “CarTel: A distributed mobile sensor
computing system,” in Proc. ACM SenSys, 2006, pp. 125–138.
[12] A. Pentland, R. Fletcher, and A. Hasson, “Daknet: Rethinking connectivity
in developing nations,” Computer, vol. 37, no. 1, pp. 78–83,
Jan. 2004.
[13] D. Jea, A. A. Somasundara, and M. B. Srivastava, “Multiple controlled
mobile elements (data mules) for data collection in sensor networks,” in
Proc. IEEE/ACM Int. Conf. DCOSS, Jun. 2005, pp. 244–257.
[14] R. C. Shah, S. Roy, S. Jain, and W. Brunette, “Data MULEs: Modeling a
three-tier architecture for sparse sensor networks,” in Proc. IEEE Workshop
Sens. Netw. Protocols Appl., 2003, pp. 30–41.
[15] S. Jain, R. C. Shah, W. Brunette, G. Borriello, and S. Roy, Exploiting
mobility for energy efficient data collection in wireless sensor networks.
Norwell, MA: Kluwer, 2005.
[16] W. Zhao, M. Ammar, and E. Zegura, “A message ferrying approach for
data delivery in sparse mobile ad hoc networks,” in Proc. ACM MobiHoc,
2004, pp. 187–198.
[17] J. Luo and J.-P. Hubaux, “Joint mobility and routing for lifetime elongation
in wireless sensor networks,” in Proc. IEEE INFOCOM, 2005,
pp. 1735–1746.
[18] A. Kansal, A. Somasundara, D. Jea, M. Srivastava, and D. Estrin, “Intelligent
fluid infrastructure for embedded networks,” in Proc. ACM MobiSys,
2004, pp. 111–124.
[19] A. A. Somasundara, A. Ramamoorthy, and M. B. Srivastava, “Mobile
element scheduling for efficient data collection in wireless sensor
networks with dynamic deadlines,” in Proc. IEEE RTSS, Dec. 2004,
pp. 296–305.
MA et al.: TOUR PLANNING FOR MOBILE DATA-GATHERING MECHANISMS IN WSNs 1483
[20] W. Wang, V. Srinivasan, and K. C. Chua, “Using mobile relays to prolong
the lifetime of wireless sensor networks,” in Proc. ACM Mobicom,
Aug. 2005, pp. 270–283.
[21] I. Slama, B. Jouaber, and D. Zeghlache, “Multiple mobile sinks deployment
for energy efficiency in large scale wireless sensor networks,” e-Bus.
Telecommun., Commun. Comput. Inf. Sci., vol. 48, no. 5, pp. 412–427,
2009.
[22] H. Lee, M. Wicke, B. Kusy, O. Gnawali, and L. Guibas, “Data stashing:
Energy-efficient information delivery to mobile sinks through trajectory
prediction,” in Proc. ACM IPSN, 2010, pp. 291–302.
[23] J.W. Lee, B. Kusy, T. Azim, B. Shihada, and P. Levis, “Whirlpool routing
for mobility,” in Proc. ACM Mobihoc, 2010, pp. 131–140.
[24] E. Ekici, Y. Gu, and D. Bozdag, “Mobility-based communication in wireless
sensor networks,” IEEE Commun. Mag., vol. 44, no. 7, pp. 56–62,
Jul. 2006.
[25] X. Xu, J. Luo, and Q. Zhang, “Delay tolerant event collection in
sensor networks with mobile sink,” in Proc. IEEE INFOCOM,Mar. 2010,
pp. 1–9.
[26] G. Xing, T. Wang, W. Jia, and M. Li, “Rendezvous design algorithm
for wireless sensor networks with a mobile base station,” in Proc. ACM
Mobihoc, May 2008, pp. 231–240.
[27] L. Guo, R. Beyah, and Y. Li, “SMITE: A stochastic compressive data
collection protocol for mobile wireless sensor networks,” in Proc. IEEE
INFOCOM, Apr. 2011, pp. 1611–1619.
[28] C. Konstantopoulos, G. Pantziou, D. Gavalas, A. Mpitziopoulos, and
B. Mamalis, “A rendezvous-based approach enabling energy-efficient sensory
data collection with mobile sinks,” IEEE Trans. Parallel Distrib.
Syst., vol. 23, no. 5, pp. 809–817, May 2012.
[29] M. Zhao and Y. Yang, “Bounded relay hop mobile data gathering in
wireless sensor networks,” IEEE Trans. Comput., vol. 61, no. 2, pp. 265–
277, Feb. 2012.
[30] W. Liang, P. Schweitzer, and Z. Xu, “Approximation algorithms for capacitated
minimum forest problems in wireless sensor networks with a
mobile sink,” IEEE Trans. Comput., to be published.
[31] F. Bai, K. S. Munasinghe, and A. Jamalipour, “A novel information acquisition
technique for mobile-assisted wireless sensor networks,” IEEE
Trans. Veh. Technol., vol. 61, no. 4, pp. 1752–1761, May 2012.
[32] P. Skraba, H. Aghajan, and A. Bahai, “RFID wakeup in event driven
sensor networks,” in SigComm Poster Session, Portland, OR, Aug. 2004.
[Online]. Available: http://conferences.sigcomm.org/sigcomm/2004/
posters/skraba.pdf
[33] W. R. Heinzelman, A. Chandrakasan, and H. Balakrishnan, “Energyefficient
communication protocols for wireless microsensor networks,” in
Proc. HICSS, Maui, HI, Jan. 2000, pp. 1–10.
[34] O. Younis and S. Fahmy, “Distributed clustering in ad-hoc sensor networks:
A hybrid, energy-efficient approach,” in Proc. IEEE INFOCOM,
Hong Kong, China, 2004, pp. 629–640.
[35] A. D. Amis, R. Prakash, T. H. P. Vuong, and D. T. Huynh, “Max–min Dcluster
formation in wireless ad hoc networks,” in Proc. IEEE INFOCOM,
Tel-Aviv, Israel, 2000, pp. 32–41.
[36] X. Liu, J. Cao, S. Lai, C. Yang, H. Wu, and Y. Xu, “Energy efficient
clustering for WSN-based structural health monitoring,” in Proc. IEEE
INFOCOM, Apr. 2011, pp. 2768–2776.
[37] S. Tang, J. Yuan, X. Li, Y. Liu, G. Chen, M. Gu, J. Zhao, and G. Dai,
“DAWN: Energy efficient data aggregation in WSN with mobile sinks,”
in Proc. IWQoS, Jun. 2010, pp. 1–9.
[38] M. Ma and Y. Yang, “Data gathering in wireless sensor networks with
mobile collectors,” in Proc. 22nd IEEE Intern. Parallel Distrib. Symp.,
Miami, FL, Apr. 2008, pp. 1–9.
[39] Z. Zhang, M. Ma, and Y. Yang, “Energy efficient multi-hop polling in
clusters of two-layered heterogeneous sensor networks,” IEEE Trans.
Comput., vol. 57, no. 2, pp. 231–245, Feb. 2008.
[40] J. H. Chang and L. Tassiulas, “Energy conserving routing in wireless adhoc
networks,” in Proc. IEEE INFOCOM, 2000, pp. 22–31.
[41] A. Arora, R. Ramnath, E. Ertin, P. Sinha, S. Bapat, V. Naik,
V. Kulathumani, H. Zhang, H. Cao, M. Sridharan, S. Kumar,
N. Seddon, C. Anderson, T. Herman, N. Trivedi, M. Nesterenko,
R. Shah, S. Kulkami, M. Aramugam, L. Wang, M. Gouda, Y. Choi,
D. Culler, P. Dutta, C. Sharp, G. Tolle, M. Grimmer, B. Ferriera, and
K. Parker, “ExScal: Elements of an extreme scale wireless sensor network,”
in Proc. 11th IEEE Int. Conf. RTCSA, 2005, pp. 102–108.
[42] G. Zhou, T. He, J. Stankovic, and T. Abdelzaher, “RID: Radio interference
detection in wireless sensor networks,” in Proc. IEEE INFOCOM, 2005,
pp. 891–901.
[43] G. Zhou, T. He, and J. Stankovic, “Impact of radio irregularity on
wireless sensor networks,” in Proc. 2nd Int. Conf. MobiSys, Jun. 2004,
pp. 125–138.
[44] B. Gavish, “Formulations and algorithms for the capacitated minimal
directed tree problem,” J. ACM, vol. 30, no. 1, pp. 118–132, Jan. 1983.
[45] R. K. Ahuja, T. L. Magnanti, and J. B. Orlin, Network Flows: Theory,
Algorithms, and Applications. Englewood Cliffs, NJ: Prentice-Hall,
1993.
[46] D. S. Johnson, “Approximation algorithms for combinatorial problems,”
J. Comput. Syst. Sci., vol. 9, no. 3, pp. 256–278, Dec. 1974.
[47] J. T. Current and D. A. Schilling, “The covering salesman problem,”
Transp. Sci., vol. 23, no. 3, pp. 208–213, Aug. 1989.
[48] E. Arkin and R. Hassin, “Approximation algorithms for the geometric
covering salesman problem,” DAMATH: Discrete Applied Math. Combinatorial
Operations Res. Comput. Sci., vol. 55, 1994.
[49] S. S. Skiena, “Traveling salesman problem,” in The Algorithm Design
Manual. New York: Springer-Verlag, 1997, pp. 319–322.
[50] M. Ma and Y. Yang, “SenCar: An energy efficient data gathering mechanism
for large scale multihop sensor networks,” IEEE Trans. Parallel
Distrib. Syst., vol. 18, no. 10, pp. 1476–1488, Oct. 2007.
[51] G. N. Frederickson, M. S. Hecht, and C. E. Kim, “Approximation algorithms
for some routing problems,” SIAM J. Comput., vol. 7, no. 1,
pp. 178–193, Feb. 1978.
[52] Free Software Foundation, Inc. (2007). GNU Linear Programming Kit,
(GLPK) package. [Online]. Available: http://www.gnu.org/software/glpk/
Ming Ma received the B.Eng. degree in electrical
engineering from the University of Science and
Technology of China, Hefei, China, in 2002 and the
Ph.D. degree in electrical engineering from Stony
Brook University, Stony Brook, NY, in 2007.
From 2007 to 2010, he was a Software Engineer
with 3PAR Inc. Since 2010, he has been with the
Storageworks Division, Hewlett Packard, Bellevue,
WA, as a Software Engineer. His research interests
include wireless sensor networks, wireless mesh networks,
and wireless local area networks.
Yuanyuan Yang (F’09) received the B.Eng. and
M.S. degrees in computer science and engineering
from Tsinghua University, Beijing, China, and the
M.S.E. and Ph.D. degrees in computer science from
Johns Hopkins University, Baltimore, MD.
She is currently a Professor of computer engineering
and computer science with Stony Brook
University, Stony Brook, NY, and the Director of
Communications and Devices Division, New York
State Center of Excellence in Wireless and Information
Technology. She has published more than
250 papers in major journals and refereed conference proceedings. She is the
holder of seven U.S. patents. Her research interests include wireless networks,
datacenter networks, optical networks, and parallel and distributed computing
systems.
Dr. Yang is currently an Associate Editor of the IEEE TRANSACTIONS ON
COMPUTERS and the Journal of Parallel and Distributed Computing. She has
served as an Associate Editor of the IEEE TRANSACTIONS ON PARALLEL
AND DISTRIBUTED SYSTEMS. She has served as a General Chair, Program
Chair, or Vice Chair for several major conferences and a Program Committee
Member for numerous conferences.
Miao Zhao received the B.Eng. and M.Eng. degrees
in electrical engineering from Huazhong University
of Science and Technology, Wuhan, China, and the
Ph.D. degree in electrical engineering from Stony
Brook University, Stony Brook, NY, in 2010.
She is currently a Postdoctoral Researcher with the
Multimedia Networking Laboratory, Huawei Technologies,
Bridgewater, NJ. Her research interests
include cross-layer design and optimization in wireless
networks, as well as performance evaluation of
protocols and algorithms.
